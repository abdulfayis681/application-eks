# Docker



# Build a Docker image
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- main

resources:
- repo: self

variables:
  containerRegistry: 'abdulfayis'
  imageRepository: 'swiggy-app'
  chartpath: 'swiggy-app'
  releasename: 'swiggy'
  tag: '$(Build.BuildId)'
  ImageName: 'abdulfayis/swiggy-app:$(Build.BuildId)'  

stages:
- stage: Build
  displayName: Build image
  jobs:  
  - job: Build
    displayName: Build and push Docker image
    pool:
      f4yiee
    steps:
    - task: DockerInstaller@0
      inputs:
        dockerVersion: '17.09.0-ce'
    - task: CmdLine@2
      inputs:
        script: |
          sudo usermod -aG docker $USER
    - task: Docker@1      
      inputs:
        containerregistrytype: 'Container Registry'
        dockerRegistryEndpoint: 'docker-hub'
        command: 'Build an image'
        dockerFile: '$(Build.SourcesDirectory)/Dockerfile'
        imageName: '$(ImageName)'
      displayName: 'Build the Docker image'
      

    - task: Docker@1      
      inputs:
        containerregistrytype: 'Container Registry'
        dockerRegistryEndpoint: 'docker-hub'
        command: 'Push an image'
        imageName: '$(ImageName)'
      condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
      displayName: 'Push the Docker image to Dockerhub'
- stage: CleanUp
  displayName: Docker Clean up
  jobs:  
  - job: CleanUp
    displayName: Docker image Clean up
    pool:
      f4yiee
    steps:
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: 'docker rmi -f $(docker images -q)'
      displayName: 'Cleaning Docker images'
      
- stage: Deploy
  displayName: Helm Deployement
  jobs:  
  - job: Deploy
    displayName: Helm deployement
    pool:
      f4yiee
    steps:
    - task: HelmInstaller@0
      inputs:
        helmVersion: '2.14.1'
        installKubectl: true
    - task: HelmDeploy@0
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceConnection: 'kube-f4yiee'
        # command: 'upgrade'
        # chartType: 'FilePath'
        # chartPath: 'swiggy-app'
        # releaseName: 'swiggy'
        # overrideValues: '$(Build.BuildId)'
        # valueFile: 'swiggy-app/values.yaml'
        # resetValues: true'
        command: 'upgrade'
        chartType: 'FilePath'
        chartPath: $(chartpath)
        releaseName: $(releasename)
        recreate: true
        waitForExecution: false'
        overrideValues: |
             image.repository=$(containerRegistry)/$(imageRepository)
             image.tag=$(tag)








